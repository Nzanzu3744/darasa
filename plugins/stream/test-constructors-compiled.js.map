{"version":3,"sources":["test-constructors.es6"],"names":[],"mappings":";;;;;AAGA,KAAK,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,MAAM,EAAE;qBACrC,QAAQ;;AAAlB,aAAU,QAAQ;;;;;2BACR,CAAC;;;;2BACD,CAAC;;;;2BACD,CAAC;;;;2BACD,CAAC;;;;2BACD,CAAC;;;;2BACD,CAAC;;;;;;;KACV;;AAED,QAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAC5B,MAAM,CAAC,UAAS,CAAC,EAAE;AAChB,eAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB,CAAC,CACD,OAAO,EAAE,CAAC;;AAEb,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC/B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CAC9B,CAAC,CAAC;;AAEH,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,MAAM,EAAE;AAC1C,QAAI,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;AAEvC,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CACpB,MAAM,CAAC,UAAU,CAAC,EAAE;AACjB,eAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB,CAAC,CACD,OAAO,EAAE,CAAC;;AAEf,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC/B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CAC9B,CAAC,CAAC;;AAEH,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,MAAM,EAAE;AAC1C,QAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;AACrB,QAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACpB,QAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACpB,QAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;AAEpB,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CACpB,MAAM,CAAC,UAAU,CAAC,EAAE;AACjB,eAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB,CAAC,CACD,OAAO,EAAE,CAAC;;AAEf,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC/B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CAC9B,CAAC,CAAC","file":"test-constructors-compiled.js","sourcesContent":["// I'm using Babel.js and Intellij IDEA File Watcher to automatically transpile es6 to js:\n// --source-maps --out-file $FileNameWithoutExtension$-compiled.js $FilePath$\n\nQUnit.test(\"input ES6 iterator\", function (assert) {\n    function* iterator() {\n        yield 1;\n        yield 2;\n        yield 3;\n        yield 4;\n        yield 5;\n        yield 6;\n    }\n\n    var result = Stream(iterator())\n      .filter(function(i) {\n          return i % 2 === 1;\n      })\n      .toArray();\n\n    assert.equal(result.length, 3);\n    assert.equal(result[0], 1);\n    assert.equal(result[1], 3);\n    assert.equal(result[2], 5);\n});\n\nQUnit.test(\"input ES6 set\", function (assert) {\n    var data = new Set([1, 2, 3, 4, 5, 6]);\n\n    var result = Stream(data)\n        .filter(function (i) {\n            return i % 2 === 1;\n        })\n        .toArray();\n\n    assert.equal(result.length, 3);\n    assert.equal(result[0], 1);\n    assert.equal(result[1], 3);\n    assert.equal(result[2], 5);\n});\n\nQUnit.test(\"input ES6 map\", function (assert) {\n    var data = new Map();\n    data.set(\"key1\", 1);\n    data.set(\"key2\", 2);\n    data.set(\"key3\", 3);\n\n    var result = Stream(data)\n        .filter(function (i) {\n            return i % 2 === 1;\n        })\n        .toArray();\n\n    assert.equal(result.length, 2);\n    assert.equal(result[0], 1);\n    assert.equal(result[1], 3);\n});"]}