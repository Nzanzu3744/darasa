{"version":3,"sources":["test-introduction.es6"],"names":[],"mappings":"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","file":"test-introduction-compiled.js","sourcesContent":["// I'm using Babel.js and Intellij IDEA File Watcher to automatically transpile es6 to js:\n// --source-maps --out-file $FileNameWithoutExtension$-compiled.js $FilePath$\n\nQUnit.test(\"sample 1\", function (assert) {\n    let myList = [\"a1\", \"a2\", \"b1\", \"c2\", \"c1\"];\n\n    let result = Stream(myList)\n        .filter(s => s.indexOf(\"c\") === 0)\n        .map(s => s.toUpperCase())\n        .sorted()\n        .toArray();\n\n    assert.equal(result.length, 2);\n    assert.equal(result[0], \"C1\");\n    assert.equal(result[1], \"C2\");\n});\n\nQUnit.test(\"sample 2\", function (assert) {\n    Stream([\"a1\", \"a2\", \"a3\"])\n        .findFirst()\n        .ifPresent(first => assert.equal(first, \"a1\"));\n\n    Stream.of(\"a1\", \"a2\", \"a3\")\n        .findFirst()\n        .ifPresent(first => assert.equal(first, \"a1\"));\n\n    let result = Stream\n        .range(1, 4)\n        .toArray();\n\n    assert.equal(result.length, 3);\n    assert.equal(result[0], 1);\n    assert.equal(result[1], 2);\n    assert.equal(result[2], 3);\n});\n\nQUnit.test(\"sample 3\", function (assert) {\n    Stream.of(1, 2, 3)\n        .map(n => 2 * n + 1)\n        .average()\n        .ifPresent(avg => assert.equal(avg, 5.0));\n});\n\nQUnit.test(\"sample 4\", function (assert) {\n    Stream.of(\"a1\", \"a2\", \"a3\")\n        .map(s => s.slice(1))\n        .map(s => parseInt(s, 10))\n        .max()\n        .ifPresent(max => assert.equal(max, 3));\n});\n\nQUnit.test(\"sample 5\", function (assert) {\n    Stream.of(\"a1\", \"b2\", \"c3\")\n        .filter(s => {\n            console.log(\"filtering: %s\", s);\n            assert.ok(false);\n            return true;\n        });\n\n    assert.ok(true);\n});\n\nQUnit.test(\"sample 6\", function (assert) {\n    let ops = [];\n\n    Stream.of(\"a1\", \"b2\", \"c3\")\n        .filter(s => {\n            ops.push(\"filter: \" + s);\n            return true;\n        })\n        .forEach(s => ops.push(\"forEach: \" + s));\n\n    assert.equal(ops.length, 6);\n    assert.equal(ops[0], \"filter: a1\");\n    assert.equal(ops[1], \"forEach: a1\");\n    assert.equal(ops[2], \"filter: b2\");\n    assert.equal(ops[3], \"forEach: b2\");\n    assert.equal(ops[4], \"filter: c3\");\n    assert.equal(ops[5], \"forEach: c3\");\n});\n\nQUnit.test(\"sample 6\", function (assert) {\n    let ops = [];\n\n    Stream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\")\n        .map(s => {\n            ops.push(\"map: \" + s);\n            return s.toUpperCase();\n        })\n        .anyMatch(s => {\n            ops.push(\"anyMatch: \" + s);\n            return s.indexOf(\"A\") === 0;\n        });\n\n    assert.equal(ops.length, 4);\n    assert.equal(ops[0], \"map: d2\");\n    assert.equal(ops[1], \"anyMatch: D2\");\n    assert.equal(ops[2], \"map: a2\");\n    assert.equal(ops[3], \"anyMatch: A2\");\n});\n\nQUnit.test(\"sample 7\", function (assert) {\n    let ops = [];\n\n    Stream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\")\n        .filter(s => {\n            ops.push(\"filter: \" + s);\n            return s.indexOf(\"a\") === 0;\n        })\n        .map(s => {\n            ops.push(\"map: \" + s);\n            return s.toUpperCase();\n        })\n        .forEach(s => ops.push(\"forEach: \" + s));\n\n    assert.equal(ops.length, 7);\n    assert.equal(ops[0], \"filter: d2\");\n    assert.equal(ops[1], \"filter: a2\");\n    assert.equal(ops[2], \"map: a2\");\n    assert.equal(ops[3], \"forEach: A2\");\n    assert.equal(ops[4], \"filter: b1\");\n    assert.equal(ops[5], \"filter: b3\");\n    assert.equal(ops[6], \"filter: c\");\n});\n\nQUnit.test(\"sample 8\", function (assert) {\n    assert.throws(function () {\n        let stream = Stream.of(1, 2, 3)\n            .filter(n => n % 2 === 1);\n\n        stream.anyMatch(n => true);     // ok\n        stream.toArray();               // error\n    });\n});\n\nQUnit.test(\"sample 9\", function (assert) {\n    let odd = array =>\n        Stream(array).filter(n => n % 2 === 1);\n\n    assert.equal(odd([1, 2, 3]).anyMatch(n => true), true);\n    assert.equal(odd([1, 2, 3]).toArray().length, 2);\n});\n\nvar persons = [\n    {name: \"Max\", age: 18},\n    {name: \"Peter\", age: 23},\n    {name: \"Pamela\", age: 23},\n    {name: \"David\", age: 12}\n];\n\nQUnit.test(\"sample 10\", function (assert) {\n    var groups = Stream(persons)\n        .groupBy(p => p.age);\n\n    assert.equal(groups[18].length, 1);\n    assert.equal(groups[23].length, 2);\n    assert.equal(groups[12].length, 1);\n});\n\nQUnit.test(\"sample 10\", function (assert) {\n    var avg = Stream(persons)\n        .map(p => p.age)\n        .average()\n        .get();\n\n    assert.equal(avg, 19);\n\n    avg = Stream(persons)\n        .map(\"age\")\n        .average()\n        .get();\n\n    assert.equal(avg, 19);\n});\n\nQUnit.test(\"sample 11\", function (assert) {\n    var phrase = Stream(persons)\n        .filter(p => p.age >= 18)\n        .map(p => p.name)\n        .join({\n            prefix: 'In Germany ',\n            suffix: ' are of legal age.',\n            delimiter: ' and '\n        });\n\n    assert.equal(phrase, 'In Germany Max and Peter and Pamela are of legal age.');\n\n    phrase = Stream(persons)\n        .filter(p => p.age >= 18)\n        .map(p => p.name)\n        .join(\" | \");\n\n    assert.equal(phrase, 'Max | Peter | Pamela');\n});\n\nQUnit.test(\"sample 12\", function (assert) {\n    var result = Stream(persons)\n        .collect({\n            supplier: () => '[',\n            accumulator: (s, p) => s + ' ' + p.name.toUpperCase(),\n            finisher: (s) => s + ' ]'\n        });\n\n    assert.equal(result, \"[ MAX PETER PAMELA DAVID ]\");\n});\n\nQUnit.test(\"sample 13\", function (assert) {\n    var oldest = Stream(persons)\n        .reduce((p1, p2) => p1.age > p2.age ? p1 : p2)\n        .get();\n\n    assert.equal(oldest.name, \"Pamela\");\n});\n\nQUnit.test(\"sample 13\", function (assert) {\n    var result = Stream(persons)\n        .sort(\"age\")\n        .reverse()\n        .reduce({names: [], sumOfAges: 0}, (res, p) => {\n            res.names.push(p.name);\n            res.sumOfAges += p.age;\n            return res;\n        });\n\n    assert.equal(result.names.length, 4);\n    assert.equal(result.names[0], \"Pamela\");\n    assert.equal(result.names[1], \"Peter\");\n    assert.equal(result.names[2], \"Max\");\n    assert.equal(result.names[3], \"David\");\n    assert.equal(result.sumOfAges, 76);\n});\n\nQUnit.test(\"sample 14\", function (assert) {\n    function* fibonacci() {\n        let [prev, cur] = [0, 1];\n        while (true) {\n            [prev, cur] = [cur, prev + cur];\n            yield cur;\n        }\n    }\n\n    var fib = Stream(fibonacci())\n        .filter(n => n % 2)\n        .takeWhile(n => n < 50)\n        .toArray();\n\n    assert.equal(fib.length, 5);\n    assert.equal(fib[0], 1);\n    assert.equal(fib[1], 3);\n    assert.equal(fib[2], 5);\n    assert.equal(fib[3], 13);\n    assert.equal(fib[4], 21);\n});"]}